FORMAT: 1A
HOST: https://apis.live.net/v5.0

# LiveConnect REST API
Live Connect is a REST API for accessing OneDrive and Outlook.com data.

More and more people are using OneDrive as their cloud-based storage. When you build apps that work with
OneDrive, you give your users the ability to access their OneDrive files, folders, albums, photos, videos 
and audio files. To ehlp you create this value and build successful apps that your customer enjoy, we 
provide the Live Connect API.

**Important:** At this time this is unofficial documentation. For the official Live Connect documentation
please see [dev.onedrive.com](http://dev.onedrive.com).

# Allowed HTTP Requests
The Live Connect REST API supports these standard HTTP verbs.

- `GET` - returns a representation of a resource.
- `POST` - adds a new resource to a collection.
- `PUT` - updates a resource at the location pointed by the URL or creates a new resource, if it doesn't exist.
- `DELETE` - deletes a resource.
- `MOVE` - moves the location of a resource.
- `COPY` - duplicates a resource.

# Usual Server Responses
Here are the possible status codes that may be returned by the Live Connect API.

- 200 `OK` - the request was sucessful
- 201 `Created` - the request was sucessful and a resource was created.
- 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty, or the resource was deleted)
- 302 `Redirect` - the request should be resubmitted to a different known location, specified by the `Location:` header.
- 400 `Bad Request` - the request could not be understood or was missing a required parameter. See error message for more details.
- 401 `Unauthorized` - the request was either missing a access_token or the token was invalid or expired.
- 403 `Forbidden` - the request was not authorized or the user has not been granted permissions.
- 404 `Not Found` - resource was not found.
- 405 `Method Not Allowed` - requested method is not supported for the resource.
- 408 `Timeout` - the request timed out.
- 409 `Conflict` - the request failed due to an edit conflict.
- 410 `Gone` - the resource is no longer supported
- 413 `Too Large` - the request entity body was too large
- 415 `Unsupported Media Type` - the request entity body was an invalid media type.
- 420 `Method Failure` - the request was throttled. Throttling occurs on a per/app per/user basis.
- 499 `Connection Issue` - there is a connnection issue with the client.
- 500 `Internal Error` - the server had an unexpected error.
- 503 `Service Unavailable` - the service is unavailable.
- 507 `Insufficient Storage` - the user doesn't have enough available storage to process the request.

# Authentication

Before you can access data using the Live Connect API, your app needs to request permissions
from the user to access the data the user has stored in OneDrive.

The Live Connect API uses OAuth 2.0 to enable users to sign in and provide consent to use your
app. When a user signs in to your app, he or she is redirected to a window that is hosted by
the Microsoft account authorization web service. After the user grants permission to access his
or her data, your app can begin working with the API.

To register your application and obtain a client ID and client secret, visit 
[the Live SDK app management site](http://go.microsoft.com/fwlink/p?LinkId=193157).

For more information about using OAuth 2.0 to authenticate and authorize your application, see
the [Microsoft Account Authorization Service](http://msdn.microsoft.com/en-us/library/dn659750.aspx) 
documentation.

The `access_token` generated by OAuth 2.0 can either be passed via query-string parameter `access_token`
to every API call, or you can use the `Authorization:` header, like this:

            Authorization: Bearer {access_token}

Either way is valid on most API calls. Some API calls require a specific pattern. When an API call requires
either the header or the query-string parameter, it will be listed as required.

# Group Folders
OneDrive is represented like a traditional file system, with folders and files. At the top-most level
the root folder represents the top of the hierarchy, or the Drive in a traditional file system. With in
a drive, there are multiple folders. Each folder may contain zero or more files or folders. There are also
several named folders created automatically when a OneDrive is provisioned. These named folders can be accessed
by name, since the user may decide to move them to different locations within their OneDrive hierarchy.

## Root Folder [/me/skydrive{?access_token}]
The root folder is the highest level in the OneDrive folder hierarchy. The root usually contains 
multiple folders and may contain files as well. It cannot be renamed, moved, copied, or deleted.

+ Parameters
    + access_token (optional, string, `ABCD1234`) ... Access token from authentication, if not using Authentication header.

+ Model

    + Headers

            Content-Type: application/json
            X-MSNSERVER: server-name
            X-HTTP-Live-Request-Id: identifier

    + Body

            {
            "id": "folder.0000000000000000",
            "from": {
                "name": null,
                "id": null
            },
            "name": "SkyDrive",
            "description": "",
            "parent_id": null,
            "size": 95637361092,
            "upload_location": "https://apis.live.net/v5.0/folder.0000000000000000/files/",
            "comments_count": 0,
            "comments_enabled": false,
            "is_embeddable": false,
            "count": 24,
            "link": "https://onedrive.live.com?cid=0000000000000000",
            "type": "folder",
            "shared_with": {
                "access": "Just me"
            },
            "created_time": null,
            "updated_time": "2014-07-08T17:39:45+0000",
            "client_updated_time": "2013-06-20T02:54:44+0000"
            }

### Get Folder Metadata [GET]
Get metadata on the root folder for a user's OneDrive.

+ Response 200

    [Root Folder][]

+ Response 401

    + Body

            { "error": {
                "code": "",
                "message": ""
            }}

### Create a new top level folder [POST]
Create a new folder at the top level of a user's OneDrive. The **wl.skydrive_update** scope is required.

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]

## Named Folders [/me/skydrive/{folder_name}{?access_token}]
Named folders represent special folders that are automatically created by OneDrive when a new
account is provisioned. These folders may have different display names because of the region
where the user's account is located.

**TIP** Named folders can be accessed by folder ID, once known, or by name. Accessing a named folder
by name is prefered, since it reduces the round trips necessary with the service.

+ Parameters

    + folder_name (required, string, `my_documents`) ... Identifer for the named folder to access
    
        + Values
            + `camera_roll`
            + `my_documents`
            + `my_photos`
            + `public_documents`
    
    + access_token (optional, string, `abcd12356`) ... Access token from authentication, if not using Authentication header.
    
### Get Named Folder Properties [GET]
Return the properties, including the id, of a named folder.

+ Response 200
    
    [Root Folder][]

### Create Folder Under Named Folder [POST]
Add a new folder as a child of a named folder. The **wl.skydrive_update** scope is required.

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]
    
## Folders by ID [/me/skydrive/{folder_id}{?access_token}]
All folders can be accessed by folder ID. User defined folders can only be accessed by Folder ID, since
the Live Connect API is ID based (not path based). To navigate to a folder with an unknown folder ID, your
app will need to 'walk' the folder hierarchy, starting at the root, through the elements of the known path,
locating a folder with the proper name at each level and looking it up by folder ID.

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
### Folder Properties [GET]
Retrieve information about the folder.

+ Response 200
    
    [Root Folder][]

### Create Subfolder [POST]
Add a new folder as a child of an existing folder. The **wl.skydrive_update** scope is required.

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]    
    
### Rename Folder [PUT]
Rename the folder or change the folder description. The **wl.skydrive_update** scope is required.

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]

### Delete Folder [DELETE]
Deletes the specified folder from the user's OneDrive. The **wl.skydrive_update** scope is required.

+ Response 200


# Group Working with Folder Contents
How to download, upload, enumerate files in a folder, and search for files.

## Folder Contents [/me/skydrive/{folder_id}/files{?access_token}]

+ Model (application/json)

    + Body
    
            {
                "data": [
                    {
                        "id": "file.0000000000000",
                        "from": {
                            "name": "owner name",
                            "id": "owner_id"
                        },
                        "name": "filename.txt",
                        "description": "file description",
                        "parent_id": "folder.00000000000",
                        "size": 1024,
                        "upload_location": "https://foo.bar/upload/location",
                        "comment_count": 0,
                        "comments_enabled": false,
                        "is_embeddable": false,
                        "count": 0,
                        "link": "https://foo.bar/content/link",
                        "shared_with": "Just me",
                        "created_time": "timestamp",
                        "updated_time": "timestamp",
                        "clientupdatedtime": ""
                    }
                ]
            }

### Enumerate files within the specified folder [GET]

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200
    
    [Folder Contents][]

## Folder Contents - Filtered [/me/skydrive/{folder_id}/files{?filter,access_token}]

### Filter the returned types of files [GET]
Filter the returned types of files to specific values

+ Parameters

    + filter (required, string, `photos`) ... Type of filter to apply. Multiple filters can be combined by separating the value with a comma. For example: filters=videos,audio
        
        + Values
        
            + `albums`
            + `audio`
            + `folders`
            + `photos`
            + `videos`
            
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [Folder Contents][]

## Folder Contents - Paging [/me/skydrive/{folder_id}/files{?limit,offset,access_token}]

### Paged Folder Content Results [GET]
The limit and offset query parameters can be used to page the results of a larger folder.

+ Parameters

    + limit (optional, number, `50`) ... Limit the number of items returned from the query
    
    + offset (optional, number, `4`) ... Specify the first entry to return from the collection.

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [Folder Contents][]

# Group Working with Files

## Uploading Files [/me/skydrive/{folder_id}/files/{file_name}{?access_token,overwrite}]

### Upload File To Folder [PUT]
Upload the contents of a file, or optionally replace the contents of an existing file.

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + file_name (required, string, `newFile1.txt`) ... Name of the file being uploaded

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + overwrite (optional, string, `true`) ... Choose how to handle the upload if a file already exists with the same name
    
        + Values
            + `false`
            + `true`
            + `ChooseNewName`
        

+ Request (application/binary)

+ Response 200

## File Metadata [/me/skydrive/{file_id}{?access_token}]

### Overwrite File Metadata [PUT]
Change the data stored about a file, photo, video, or audio. The **wl.skydrive_update** scope is required.

+ Parameters

    + file_id (required, string, `file.0000000000000000.000000000000!000`) ... Identifer for the file to update

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Request File, Video, or Photo (application/json)

            {
                "name": "NewFilename.doc",
                "description": "new description"
            }
    
+ Response 200

+ Request Audio File (application/json)

            // Additional properties can be written for audio files
            {
                "name": "NewFilename.doc",
                "description": "new description",
                
                "title": "new audio title",
                "artist": "new artist",
                "album": "new album",
                "album_artist": "new album artist",
                "genre": "new genre"
            }
            
+ Response 200

## Download [/me/skydrive/{file_id}/content{?access_token,download}]

### Download Binary Stream [GET]

Download the contents of a file, photo, video, or audio. The **wl.skydrive** scope is required.

**Tip** You can instruct the user's web browser to prompt the user to save the file that's downloading 
instead of having the browser try to download and display the file directly in its own window. To do 
this, set the optional download parameter to true. This will add the `Content-Disposition: attachment` 
header to the response.

### Support for Resumable Downloads
The Live SDK provides support for resumable downloads by using the [HTTP
Range header](http://go.microsoft.com/fwlink/p/?linkid=233595). If a download is interrupted, an app can continue the download at a later 
time by requesting only the byte range for the remainder of the file. This is 
particularly useful when downloading larger files, or in situations where network 
reliability is less than optimal.

+ Parameters

    + file_id (required, string, `file.abcd1234.abcd1234!567`) ... ID for the file to download
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + download = `false` (optional, boolean) ... Use the download parameter to set the Content-Disposition header on the response.
    
        + Values
        
            + `false`
            + `true`

+ Response 200

## Alternative Methods [/me/skydrive/files{?access_token,state,redirect_uri}]

### Upload using POST [POST]

Upload a file to a folder, for clients that cannot support the PUT operation. This method should be 
avoided if possible. When using **POST** method the contents of the request must be formatted as
multipart/form-data. You provide the file to upload in a multipart section, while providing the 
file name in the `Content-Disposition` header's *filename* parameter. For more information see
[RFC 2388](http://go.microsoft.com/fwlink/p/?linkid=233309). **Note** that only one multipart section
is supported in the body of the request.

**Important** On platforms that support the **PUT** request, **PUT** should be used to upload files to OneDrive
when possible to avoid errors that can occur when **POST** is used.

If you use the optional `redirect_uri` parameter, OneDrive returns an HTML result similar to the following
when the upload has completed:

        <html><head>
            <script type="text/javascript">
                window.location = "http://contoso.com/uploadcb.htm#state=myNewFileState&result={encoded json}"
            </script>
        </head></html>
        
The encoded JSON in the `result` query-string parameter will have two properties, `id` and `soruce` refering 
to the uploaded file.

+ Parameters

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + redirect_uri (optional, string `http://contoso.com/uploadcb.htm`)
        Optionally you can instruct OneDrive to notify the web browser when the upload finishes. You can also
        attach a unique identifier to each upload request so that you can identify a particular file if you 
        are uploading multiple files in quick succession. Specify the path to your callback page in this
        parameter.
        
        **Note** the domain portion of the path must match the redirect domain that you specified 
        in the Live SDK app management site for the corresponding client ID.
    
    + state (optional, string, `myNewFileState`) ... Unique identifer for callback to indicate the file being uploaded.
    
+ Request (multipart/form-data; boundary=A300x)

        --A300x
        Content-Disposition: form-data; name="file"; filename="HelloWorld.txt"
        Content-Type: application/octet-stream
        
        Hello, World!
        --A300x--

+ Response 200




## Move and Copy Files or Folders [/me/skydrive/{file_or_folder_id}{?access_token}]
To move a folder, file, photo, video, or audio, use the MOVE method. The **wl.skydrive_update** scope is
required. The source can be anything except the root of a OneDrive. The destination must be the folder to
which the item will be moved.

+ Parameters

    + file_or_folder_id (required, string, `file.0000000000000000.000000000000!000`) ... Identifer for the file or folder that is the source item in the move or copy.

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

### Move a File [MOVE]

+ Request (application/json)

            {
                "destination": "folder.a123123abef123.a6b123!123"
            }

+ Response 200

### Copy a File [COPY]

+ Request (application/json)

            {
                "destination": "folder.a123123abef123.a6b123!123"
            }

+ Response 200

## Search [/me/skydrive/search{?q,access_token}]

+ Parameters

    + q (required, string, `family`) ... Query text used to find files and folders that match the text provided.
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
To find a file or folder with a particular name across a user's OneDrive, use the search action.

### Find Matching Filenames [GET]
    
+ Response 200

    [Folder Contents][]
    
# Group Account Information
To access a user's data, the **wl.basic** scope must be requested during authorization.

## User Information [/{user_id}{?access_token}]

+ Model (application/json)

            {
                "id": "contact.120312301230123010230123",
                "first_name": "Roberto",
                "last_name": "Tamburello",
                "name": "Roberto Tamburello",
                "gender": "male",
                "locale": "en_US"
            }

### Retrieve User Information [GET]
Retrieve user information for a contact specified by `user_id`. You can use the shortcut `me` to reference
the signed in user.

+ Parameters

    + user_id (required, string, `me`) ... ID value for the user who's information should be retrieved.
    
        + Values
            + `me`
            + `contact.c13123123010230123`
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [User Information][]

## Friends List [/{user_id}/friends{?access_token}]

### Retrieve Friends List [GET]
Retrieve the friends of the contact specified by `user_id`. You can use the shortcut `me` to reference
the signed in user.

+ Parameters

    + user_id (required, string, `me`) ... ID value for the user who's information should be retrieved.
    
        + Values
            + `me`
            + `contact.c13123123010230123`
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200 (application/json)

            { 
                "data": [
                { 
                    "id": "00000000000000",
                    "name": "Robert Tamburello"
                },
                {
                    "id": "000000000000001",
                    "name": "Ryan Gregg"
                }
                ]
            }


# Group Links to Files and Folders
Your app can get the following types of links to OneDrive folders and files.

+ An *embedded link*, which is an HTML code snippet that you can insert into a webpage to provide
an interactive view of the corresponding file. **Note** Currently, embedded links are supported only
for files owned by the user. To determine whether a given file can be embedded, check to see if the 
corresponding object's `is_embeddable` property is set to `true`.

+ A *read-only* link, which is a link to a read-only version of the folder or file.

+ A *read-write* link, which is a link to a read-write version of the folder or file.

**Important** When your app requests a read-only or read-write link to a file, the URL to that file is the
same for either request. When your app requests a read-only link for a file and then later requests a 
read-write link for the same file, read-only permission for that link is revoked. Similarly, when your app 
requests a read-write link for a file and then later requests a read-only link for that same file, read-write
permission for that link is revoked.

## Sharing - Read Only Link [/{file_or_folder_id}/shared_read_link{?access_token}]

### Generate or retrieve a link [GET]

Get a read-only link to the file or folder. **Note** requesting this link will replace any previously requested read-write link.

+ Parameters

    + file_or_folder_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file or folder to get a link for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "link": "https://onedrive.live.com/redir.aspx?cid=..." }

## Sharing - Read Write Link [/{file_or_folder_id}/shared_edit_link{?access_token}]

### Generate or retireve a link [GET]

Get a read-write link to the file or folder. **Note** requesting this link will replace any previously requested read-only link.

+ Parameters

    + file_or_folder_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file or folder to get a link for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "link": "https://onedrive.live.com/redir.aspx?cid=..." }

## Sharing - Embed Content [/{file_id}/embed{?access_token}] 

### Get Embed HTML Snippet [GET]
Get HTML definition for embedding this file in another page.

+ Parameters

    + file_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file to get embed HTML for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "embed_html": "<iframe src=\"https://onedrive.live.com/....\"></iframe>" }

## Sharing - Get Shared File Preview [/skydrive/get_item_preview{?type,url}]

### Get Item Preview [GET]

Get a preview of an item by providing the sharing link to the item.

Four preview types are available:

+ `thumbnail`
+ `small` which returns a maximum of 100x100 pixel preview
+ `album` which returns a maximum 200x200 pixel preview
+ `normal` which returns a maximum 800x800 pixel preview

**Notes**

+ To make the `get_item_preview` request you don't need to request any scopes or provide an access token. This
request uses pre-authenticated URLs and as such does not require a signed-in user.

+ If the item is not a photo and a preview is associated with the item, a thumbnail preview is displayed and 
the type parameter is ignored even if provided.

+ If a particular size of preview doesn't exist, the next-largest size preview available is used. If no 
preview is assoicated with the item a 404 (Not Found) error is returned.

+ The value of the url query-string parameter must be URL encoded. For example, use %3A to 
represent a colon (:), %2F for a forward slash (/), %3F for a question mark (?), and %26 for the 
ampersand (&) character.

+ Parameters

    + type = `thumbnail` (optional, string) ... Specify the type of preview to request.

        + Values
            + `thumbnail`
            + `small`
            + `album`
            + `normal`
    
    + url (required, string, `https://onedrive.live.com/redir.aspx?cid=123...`) ... The sharing link to the content a preview should be generated for.

+ Response 302

    + Headers
    
            Location: https://onedrive.live.com/foo/bar.jpg

+ Response 404


# Group Shared Files
To discover all OneDrive objects that are shared with the signed-in user, your app needs the **wl.contacts_skydrive** scope.

## Shared By Signed In User [/me/skydrive/shared{?access_token}]

### List files shared by signed-in user [GET]
Retrieve a list of all files the signed in user is currently sharing.

+ Parameters

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200 (application/json)

    [Folder Contents][]

## Shared By Another User [/{user_id}/shared{?access_token}]

### List files accessible by signed-in user [GET]

Retrieve a list of all files the specified user has shared with the signed-in user.

+ Parameters
    
    + user_id (required, string, `0d12300af000a01`) ... User ID for the owner of files that have been shared.

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200 (application/json)

    [Folder Contents][]




# Group Recent Files

## Most Recently Used [/me/skydrive/recent_docs{?access_token}]

### List Recent Files [GET]

Return a list of files that have recently be used by the user. The **wl.skydrive** scope is required.

+ Parameters
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [Folder Contents][]


# Group Quota Management

## Quota [/me/skydrive/quota{?access_token}]

### Sign-in User Quota [GET]

Use this API to determine the user's total OneDrive quota space and how much is still available. Values
are returned in bytes.

+ Parameters

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200 (application/json)

            {
                "quota": 26843545600,
                "available": 26805319016
            }

# Group Working with Albums

## Albums [/me/albums{?access_token}]

### Listing Albums [GET]

+ Response 200 (application/json)

## Shared Albums [/{user_id}/albums{?access_token}]

### Listing Shared Albums [GET]

+ Response 200 (application/json)


# Group Permissions

## Permissions [/me/permissions]

### List Current Permission Scopes [GET]
Retrieve a collection of the scopes currently authorized by the user

+ Response 200 (application/json)

            {
                "data": [
                    "wl.basic": 1,
                    "wl.offline_access": 1,
                    "wl.signin": 1
                    ]
            }

# Group REST Objects
In the Live Connect API, REST objects contain categories of information. Objects consist of a
combination of child *objects*, *arrays*, and *values*. To access a specific object, you must
know the unique ID of that object.

## Album Object
The **Album** object contains info about one of the user's albums in OneDrive. Albums are 
stored at the root level of a user's OneDrive and can contain a combination of photos, videos, 
audio, files, and folders.

The **wl.photos** scope is required to access albums. You can also use **wl.contacts_photos** scope
to read any album, photo, video, or audio that other users have shared with the current user.

### Album Properties
The album object contains the following properties:

- `id` (string, readonly) - The album object's ID.
- `from` (Author object, readonly) - Information about the user who authored the album.
- `name` (string, read-write) - Name of the album. This property is required when creating the object.
- `description` (string, read-write) - A description of the album, or null if no description is specified.
- `parent_id` (string, readonly) - The resource ID of the parent of the album.
- `upload_location` (string, readonly) - The URL to upload items to the album, hosted in OneDrive. Requires the **wl.skydrive** scope.
- `is_embeddable` (boolean, readonly) - A value that indicates whether this album can be embedded. If the album can be embedded, this value is **true**; otherwise, it is **false**.
- `count` (number, readonly) - The total number of items in the album.
- `link` (string, readonly) - A URL of the album, hosted in OneDrive.
- `type` (string, readonly) - The type of object, in this case "album".
- `shared_with` (object, readonly) - An object that defines who this album has been shared with.
- `created_time` (string, readonly) - The time, in ISO 8601 format, at which the album was created.
- `updated_time` (string, readonly) - The time, in ISO 8601 format, that the system updated the album last.
- `client_updated_time` (string, readonly) - The time, in ISO 8601 format, that the file was last updated.

### Example
            {
               "data": [
                  {
                     "id": "album.8c8ce076ca27823f.8C8CE076CA27823F!126",
                     "from": {
                        "name": "Roberto Tamburello",
                        "id": "8c8ce076ca27823f"
                     },
                     "name": "My Sample Album 1", 
                     "description": "",
                     "parent_id": "folder.de57f4126ed7e411",
                     "upload_location": "https://apis.live.net/v5.0/folder.de57f4126ed7e411.DE57F4126ED7E411!126/files/",
                     "is_embeddable": true
                     "count": 4, 
                     "link": "https://cid-8c8ce076ca27823f.skydrive.live.com/redir.aspx?page\u003dself\u0026resid\u003d8C8CE076CA27823F!126\u0026type\u003d5", 
                     "type": "album",
                     "shared_with": {
                        "access": "Everyone (public)"
                     },
                     "created_time": "2011-04-21T23:19:47+0000", 
                     "updated_time": "2011-04-22T19:18:12+0000"
                  }, {
                     ...
                  }
               ]
            }

## Audio Object
The **Audio** object contains info about one of the user's audio in OneDrive.

### Audio Properties
The album object contains the following properties:

- `id` (string, readonly) - The audio object's ID.
- `from` (Author object, readonly) - Information about the user who authored the audio.
- `name` (string, read-write) - Name of the audio file. This property is required when creating the object.
- `description` (string, read-write) - A description of the audio, or null if no description is specified.
- `parent_id` (string, readonly) - The resource ID of the parent of the audio
- `size` (number, readonly) - The size, in bytes, of the audio.
- `upload_location` (string, readonly) - The URL to upload items to the audio, hosted in OneDrive. Requires the **wl.skydrive** scope.
- `comments_count` (number, readonly) - The number of comments associated with the audio.
- `comments_enabled` (boolean, readonly) - A value that indicates whether comments are enabled for the audio. If comments can be made, this value is **true**; otherwise, it is **false**. 
- `is_embeddable` (boolean, readonly) - A value that indicates whether this audio can be embedded. If the album can be embedded, this value is **true**; otherwise, it is **false**.
- `source` (string, readonly) - The URL to use to download the audio from OneDrive. **Warning:** This value should not be persisted. Use it immediately after making the request and avoid caching.
- `link` (string, readonly) - A URL of the audio, hosted in OneDrive.
- `type` (string, readonly) - The type of object, in this case "audio".
- `title` (string, read-write) - The audio's title.
- `artist` (string, read-write) - The audio's artist name.
- `album` (string, read-write) - The audio's album name.
- `album_artist` (string, read-write) - The artist name of the audio's album.
- `genre` (string, read-write) - The audio's genre.
- `duration` (number, readonly) - The audio's playing time, in milliseconds.
- `picture` (string, readonly) - A URL to view the audio's picture on OneDrive.
- `shared_with` (object, readonly) - An object that defines who this audio has been shared with.
- `created_time` (string, readonly) - The time, in ISO 8601 format, at which the audio was created.
- `updated_time` (string, readonly) - The time, in ISO 8601 format, that the system updated the audio last.
- `client_updated_time` (string, readonly) - The time, in ISO 8601 format, that the audio was last updated.

### Example
            {
               "data": [
                  {
                     "id": "file.a6b2a7e8f2515e5e.A6B2A7E8F2515E5E!144", 
                     "from": {
                        "name": "Stig Struve-Christensen", 
                        "id": "a6b2a7e8f2515e5e"
                     }, 
                     "name": "SampleAudio.mp3", 
                     "description": null, 
                     "parent_id": "folder.a6b2a7e8f2515e5e", 
                     "size": 8414449,
                     "upload_location": "https://apis.live.net/v5.0/file.a6b2a7e8f2515e5e.A6B2A7E8F2515E5E!144/content/",  
                     "comments_count": 0, 
                     "comments_enabled": false, 
                     "is_embeddable": false, 
                     "source": "http://storage.live.com/s1p60U8Xs4UzIXTScrTioalE-ZaVFiDQBA15MS2BwcsuNjfG64Z2fw-DAjXnPuqC47YR40_xAoPD8aRGhtna9ZFZ9_oO4BTz4CWF973DTXMxc5U3TntcQ9qEA/SampleAudio.mp3:Binary", 
                     "link": "https://skydrive.live.com/redir.aspx?cid\u003d22688711f5410e6c\u0026page\u003dview\u0026resid\u003d22688711F5410E6C!582\u0026parid\u003d22688711F5410E6C!581",
                     "type": "audio",
                     "title": "My Sample Audio",
                     "artist": "My Favorite Artist",
                     "album": "My Favorite Album",
                     "album_artist": "My Favorite Artist", 
                     "genre": "Easy Listening", 
                     "duration": 225000,
                     "picture": "https://storage.live.com/items/A6B2A7E8F2515E5E!144:MobileReady/SampleAudio.mp3?psid=1&ck=0&ex=720"   
                     "shared_with": {
                        "access": "Just me"
                     }, 
                     "created_time": "2012-09-23T22:00:57+0000", 
                     "updated_time": "2012-09-03T22:00:57+0000"
                  }, {
                     ...
                  }
               ]      
            }

## Author Object
The Author object contains information about the user who authored or modified an album, file, folder,
photo, video, or audio.

### Author Properties
The author object contains the following properties:

- `name` (string, readonly) - The name of the user who authored the object.
- `id` (string, readonly) - The ID of the user who authored the object.

### Example
            {
            ...
            "from": {
                        "name": "Stig Struve-Christensen", 
                        "id": "a6b2a7e8f2515e5e"
                     },
            ...         
            }

## Error Object
The Error object contains information about an error that is requred by the Live Connect API.

### Error Properties
- `code` (string, readonly) - The error code.
- `message` (string, readonly) - The error message, in the user's current locale.

### Example
            {
                "error": {
                    "code": "request_token_expired",
                    "message": "The provided access token has expired."
                }
            }
            
## File Object
The **File** object contains info about one of the user's files in OneDrive.

### File Properties
The file object contains the following properties:

- `id` (string, readonly) - The file object's ID.
- `from` (Author object, readonly) - Information about the user who authored the file.
- `name` (string, read-write) - Name of the file. This property is required when creating the object.
- `description` (string, read-write) - A description of the file, or null if no description is specified.
- `parent_id` (string, readonly) - The resource ID of the parent of the file
- `size` (number, readonly) - The size, in bytes, of the file.
- `upload_location` (string, readonly) - The URL to upload file content.
- `comments_count` (number, readonly) - The number of comments associated with the audio.
- `comments_enabled` (boolean, readonly) - A value that indicates whether comments are enabled for the audio. If comments can be made, this value is **true**; otherwise, it is **false**. 
- `is_embeddable` (boolean, readonly) - A value that indicates whether this audio can be embedded. If the album can be embedded, this value is **true**; otherwise, it is **false**.
- `source` (string, readonly) - The URL to use to download the audio from OneDrive. **Warning:** This value should not be persisted. Use it immediately after making the request and avoid caching.
- `link` (string, readonly) - A URL of the audio, hosted in OneDrive.
- `type` (string, readonly) - The type of object, in this case "audio".
- `shared_with` (object, readonly) - An object that defines who this audio has been shared with.
- `created_time` (string, readonly) - The time, in ISO 8601 format, at which the audio was created.
- `updated_time` (string, readonly) - The time, in ISO 8601 format, that the system updated the audio last.
- `client_updated_time` (string, readonly) - The time, in ISO 8601 format, that the audio was last updated.
- `sort_by` (string, read-write) - Sorts the items to specify the following criteria: updated, name, size or default.

### Example
            {
               "data": [
                  {
                     "id": "file.22688711f5410e6c.22688711F5410E6C!942", 
                     "from": {
                        "name": "William Flash", 
                        "id": "22688711f5410e6c"
                     }, 
                     "name": "Processing.docx", 
                     "description": null, 
                     "parent_id": "folder.22688711f5410e6c.22688711F5410E6C!479", 
                     "size": 12692, 
                     "upload_location": "https://apis.live.net/v5.0/file.22688711f5410e6c.22688711F5410E6C!942/content/", 
                     "comments_count": 0, 
                     "comments_enabled": true, 
                     "is_embeddable": false, 
                     "source": "http://storage.live.com/s1pEwo9qzyT4_BJZqMNm-aVzgLo-WRsQGzjzFsXjyREuQG5pDYr237vKz3i2pmqFuniYPzsuIZAOCUMB_gdfKCUpLpVcaAMXGrk4T7jOWenRniCv9vex7GWfSvy-XCVBVnU/Processing.docx:Binary", 
                     "link": "https://skydrive-df.live.com/redir.aspx?cid\u003d22688711f5410e6c\u0026page\u003dview\u0026resid\u003d22688711F5410E6C!942\u0026parid\u003d22688711F5410E6C!479", 
                     "type": "file", 
                     "shared_with": {
                        "access": "Everyone (public)"
                     }, 
                     "created_time": "2011-10-12T23:18:23+0000", 
                     "updated_time": "2011-10-12T23:18:23+0000"
                  },{
                     ...
                  }
               ]
            }

## Folder Object
The **Folder** object contains info about one of the user's folders in OneDrive.

### Folder Properties
The folder object contains the following properties:

- `id` (string, readonly) - The album object's ID.
- `from` (Author object, readonly) - Information about the user who authored the album.
- `name` (string, read-write) - Name of the album. This property is required when creating the object.
- `description` (string, read-write) - A description of the album, or null if no description is specified.
- `count` (number, readonly) - The total number of items in the album.
- `link` (string, readonly) - A URL of the album, hosted in OneDrive.
- `parent_id` (string, readonly) - The resource ID of the parent of the album.
- `upload_location` (string, readonly) - The URL to upload items to the folder, hosted in OneDrive. Requires the **wl.skydrive** scope.
- `is_embeddable` (boolean, readonly) - A value that indicates whether this album can be embedded. If the album can be embedded, this value is **true**; otherwise, it is **false**.
- `type` (string, readonly) - The type of object, in this case "album".
- `created_time` (string, readonly) - The time, in ISO 8601 format, at which the album was created.
- `updated_time` (string, readonly) - The time, in ISO 8601 format, that the system updated the album last.
- `client_updated_time` (string, readonly) - The time, in ISO 8601 format, that the file was last updated.
- `shared_with` (object, readonly) - An object that defines who this album has been shared with.
- `sort_by` (string, read-write) - Sorts the items to specify the following criteria: updated, name, size or default.

### Example
            {
               "data": [
                  {
                     "id": "folder.8c8ce076ca27823f.8C8CE076CA27823F!142", 
                     "from": {
                        "name": "Roberto Tamburello", 
                        "id": "8c8ce076ca27823f"
                     }, 
                     "name": "My Sample Folder in Album 1", 
                     "description": "",
                     "parent_id": "folder.de57f4126ed7e411", 
                     "upload_location": "https://apis.live.net/v5.0/folder.de57f4126ed7e411.DE57F4126ED7E411!126/files/", 
                     "is_embeddable": true, 
                     "count": 3, 
                     "link": "https://cid-8c8ce076ca27823f.skydrive.live.com/redir.aspx?page\u003dself\u0026resid\u003d8C8CE076CA27823F!142\u0026parid\u003d8C8CE076CA27823F!126\u0026type\u003d5", 
                     "type": "folder", 
                     "shared_with": {
                         "access": "Just me"
                     },
                     "created_time": "2011-04-22T00:36:30+0000", 
                     "updated_time": "2011-04-22T19:18:12+0000"
                  }, {
                     ...
                  }
               ]
            }

## Permissions Object
The **Permissions** object contains a list of scopes, showing those scopes to which the user has consented.

The response body contains a JavaScript Object Notation (JSON) object that lists all consented scopes as a name/value pair. Each scope to which the user consented is present as a key.

### Example
            {
               "data": [
                    {         
                        "wl.basic": 1,
                        "wl.offline_access": 1,
                        "wl.signin": 1,
                        ...
                    }
                ]
            }

## Photo Object
The **Photo** object contains info about a user's photos on Microsoft OneDrive.

The Live Connect API supports creating, reading, updating, and deleting Photo objects. Use 
the **wl.photos** scope to read Photo objects. Use the **wl.contacts_photos** scope to read 
any albums, photos, videos, and audio that other users have shared with the user. Use the 
**wl.skydrive_update** scope to create, update, or delete Photo objects.

### Photo Properties
The photo object contains the following properties:

- `id` (string, readonly) - The file object's ID.
- `from` (Author object, readonly) - Information about the user who authored the file.
- `name` (string, read-write) - Name of the file. This property is required when creating the object.
- `description` (string, read-write) - A description of the file, or null if no description is specified.
- `parent_id` (string, readonly) - The resource ID of the parent of the file
- `size` (number, readonly) - The size, in bytes, of the file.
- `comments_count` (number, readonly) - The number of comments associated with the audio.
- `comments_enabled` (boolean, readonly) - A value that indicates whether comments are enabled for the audio. If comments can be made, this value is **true**; otherwise, it is **false**. 
- `tags_count` (number, readonly) - The number of tags on the photo.
- `tags_enabled` (boolean, readonly) - A value that indicates whether tags are enabled for the phoot. If users can tag the photo, this value is **true**; otherwise, it is **false**.
- `is_embeddable` (boolean, readonly) - A value that indicates whether this audio can be embedded. If the album can be embedded, this value is **true**; otherwise, it is **false**.
- `picture` (string, readonly) - A URL of the photo's picture.
- `source` (string, readonly) - The URL to use to download the audio from OneDrive. **Warning:** This value should not be persisted. Use it immediately after making the request and avoid caching.
- `upload_location` (string, readonly) - The URL to upload file content.
- `images` (array, readonly) - Information about various sizes of the photo that are available.
- `link` (string, readonly) - A URL of the audio, hosted in OneDrive.
- `when_taken` (string, readonly) The date, in ISO 8601 format, on which the photo was taken, or null if no date is specified.
- `height` (number, readonly) The height, in pixels, of the photo.
- `width` (number, readonly) The width, in pixels, of the photo.
- `type` (string, readonly) - The type of object, in this case "photo".
- `location` (object, readonly) - The location where the photo was taken. **Note:** the location object is not available for shared photos.
- `camera_make` (string, readonly) - The manufacturer of the camera that took the phoot.
- `camera_model` (string, readonly) - The brand and model number of the camera that took the photo.
- `focal_ratio` (double, readonly) - The f-number that the photo was taken at.
- `focal_length` (double, readonly) - The focal length that the photo was taken at, typically expressed in millimeters for newer lenses.
- `exposure_numerator` (double, readonly) - The numerator of the shutter speed the photo was taken at.
- `exposure_denominator` (double, readonly) - The denominator of the shutter speed the photo was taken at.
- `shared_with` (object, readonly) - An object that defines who this audio has been shared with.
- `created_time` (string, readonly) - The time, in ISO 8601 format, at which the audio was created.
- `updated_time` (string, readonly) - The time, in ISO 8601 format, that the system updated the audio last.

### Images Array
Each object in the images array contains the following properties:

- `height` (number) - Height of the image preview, in pixels.
- `width` (number) - With of the image preview, in pixels.
- `source` (string) - A URL to download the image preview
- `type` (string) - The type of image preview availalbe (normal, album, thumbnail, full)

### Location object
The location property consists of an object with the following properties:

- `latitude` (double) - The latitude portion of the location where the photo was taken, expressed as positive (north) or negative (south) degrees relative to the equator.
- `longitude` (double) - The longitude portion of the location where the photo was taken, expressed as positive (east) or negative (west) degrees relative to the Prime Meridian.
- `altitude` (double) - The altitude portion of the location where the photo was taken, expressed as positive (above) or negative (below) values relative to sea level, in units of measurement as determined by the camera.

### Example
            {
               "data": [
                  {
                     "id": "file.de57f4126ed7e411.DE57F4126ED7E411!128", 
                     "from": {
                        "name": "Nuno Bento", 
                        "id": "de57f4126ed7e411"
                     }, 
                     "name": "Maui-2012_0034.JPG", 
                     "description": null, 
                     "parent_id": "folder.de57f4126ed7e411.DE57F4126ED7E411!126", 
                     "size": 561683, 
                     "comments_count": 1, 
                     "comments_enabled": true, 
                     "tags_count": 0, 
                     "tags_enabled": true,
                     "is_embeddable": true, 
                     "picture": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:Thumbnail", 
                     "source": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:HighRes", 
                     "upload_location": "https://apis.live.net/v5.0/file.de57f4126ed7e411.DE57F4126ED7E411!128/content/", 
                     "images": [
                        {
                           "height": 450, 
                           "width": 600, 
                           "source": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:WebReady", 
                           "type": "normal"
                        }, {
                           "height": 132, 
                           "width": 176, 
                           "source": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:MobileReady", 
                           "type": "album"
                        }, {
                           "height": 72, 
                           "width": 96, 
                           "source": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:Thumbnail", 
                           "type": "thumbnail"
                        }, {
                           "height": 1200, 
                           "width": 1600, 
                           "source": "http://storage.live.com/s1pKk5vzd-gdPanbzKYhB0nQGn8wGq5DSgqvrgIHU1NTXA4e2-spGkAhQjW1d9pcgKAGLB4NsEsSvDoREmdx5w-JiFrinEJJuEoz08Ws_IFupkX2bPSvy5qmths9ijwvDrXi1OBCWk9GW9Kt-qNNOAA9g/Maui09_0034.JPG:HighRes", 
                           "type": "full"
                        }
                     ], 
                     "link": "https://skydrive.live.com/redir.aspx?cid\u003dde57f4126ed7e411\u0026page\u003dview\u0026resid\u003dDE57F4126ED7E411!128\u0026parid\u003dDE57F4126ED7E411!126", 
                     "when_taken": "2008-03-24T23:41:53+0000", 
                     "height": 1200, 
                     "width": 1600, 
                     "type": "photo",
                     "location": {
                         "latitude": 47.65316, 
                         "longitude": -122.135911,
                         "altitude": 43
                     }, 
                     "camera_make": "MyManufacturer",
                     "camera_model": "MyModel",
                     "focal_ratio": 2.8,
                     "focal_length": 3.85,
                     "exposure_numerator": 1,
                     "exposure_denominator": 15, 
                     "shared_with": {
                        "access": "Everyone (public)"
                     }, 
                     "created_time": "2012-12-03T18:14:03+0000", 
                     "updated_time": "2012-12-03T18:31:01+0000"
                  }, {
                     ...
                  }
               ]      
            }
