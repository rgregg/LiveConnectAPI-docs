FORMAT: 1A
HOST: https://apis.live.net/v5.0

# LiveConnect REST API
Live Connect is a REST API for accessing OneDrive and Outlook.com data.

# Group Authentication

Before you can access data using the Live Connect API, your app needs to request permissions
from the user to access the data the user has stored in OneDrive.

The Live Connect API uses OAuth 2.0 to enable users to sign in and provide consent to use your
app. When a user signs in to your app, he or she is redirected to a window that is hosted by
the Microsoft account authorization web service. After the user grants permission to access his
or her data, your app can begin working with the API.

To register your application and obtain a client ID and client secret, visit 
[the Live SDK app management site](http://go.microsoft.com/fwlink/p?LinkId=193157).

For more information about using OAuth 2.0 to authenticate and authorize your application, see
the [Microsoft Account Authorization Service](http://msdn.microsoft.com/en-us/library/dn659750.aspx) 
documentation.

The `access_token` generated by OAuth 2.0 can either be passed via query-string parameter `access_token`
to every API call, or you can use the `Authorization:` header, like this:

            Authorization: Bearer {access_token}

Either way is valid on most API calls. Some API calls require a specific pattern. When an API call requires
either the header or the query-string parameter, it will be listed as required.

# Group OneDrive Folders
The following operations are the basics for operating with OneDrive.

## Root Folder [/me/skydrive{?access_token}]
Access folders in OneDrive either from the root, by named folder, or by ID.

+ Parameters
    + access_token (optional, string, `ABCD1234`) ... Access token from authentication, if not using Authentication header.

+ Model

    + Headers

            Content-Type: application/json
            X-MSNSERVER: server-name
            X-HTTP-Live-Request-Id: identifier

    + Body

            {
            "id": "folder.0000000000000000",
            "from": {
                "name": null,
                "id": null
            },
            "name": "SkyDrive",
            "description": "",
            "parent_id": null,
            "size": 95637361092,
            "upload_location": "https://apis.live.net/v5.0/folder.0000000000000000/files/",
            "comments_count": 0,
            "comments_enabled": false,
            "is_embeddable": false,
            "count": 24,
            "link": "https://onedrive.live.com?cid=0000000000000000",
            "type": "folder",
            "shared_with": {
                "access": "Just me"
            },
            "created_time": null,
            "updated_time": "2014-07-08T17:39:45+0000",
            "client_updated_time": "2013-06-20T02:54:44+0000"
            }

### Get Folder Metadata [GET]
Get metadata on the root folder for a user's OneDrive

+ Response 200

    [Root Folder][]

+ Response 401

    + Body

            { "error": {
                "code": "",
                "message": ""
            }}

### Create a new top level folder [POST]
Create a new folder at the top level of a user's OneDrive

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]

## Named Folders [/me/skydrive/{folder_name}{?access_token}]
Access a named folder in OneDrive

+ Parameters

    + folder_name (required, string, `my_documents`) ... Identifer for the named folder to access
    
        + Values
            + `camera_roll`
            + `my_documents`
            + `my_photos`
            + `public_documents`
    
    + access_token (optional, string, `abcd12356`) ... Access token from authentication, if not using Authentication header.
    
### Get Named Folder Properties [GET]

+ Response 200
    
    [Root Folder][]

### Create Folder Under Named Folder [POST]

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]
    
## Folders by ID [/me/skydrive/{folder_id}{?access_token}]
Access a named folder in OneDrive

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
### Folder Properties [GET]

+ Response 200
    
    [Root Folder][]

### Create Subfolder [POST]

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]    
    
### Rename Folder [PUT]
Rename the folder or change the folder description

+ Request

    + Body
    
            {
                "name": "new folder name",
                "description": "folder description"
            }

+ Response 200

    [Root Folder][]

### Delete Folder [DELETE]
Delete the specified folder

+ response 200


# Group Working with Files
How to download, upload, enumerate files in a folder, and search for files based on filename.

## Folder Contents [/me/skydrive/{folder_id}/files]

+ Model (application/json)

    + Body
    
            {
                "data": [
                    {
                        "id": "file.0000000000000",
                        "from": {
                            "name": "owner name",
                            "id": "owner_id"
                        },
                        "name": "filename.txt",
                        "description": "file description",
                        "parent_id": "folder.00000000000",
                        "size": 1024,
                        "upload_location": "https://foo.bar/upload/location",
                        "comment_count": 0,
                        "comments_enabled": false,
                        "is_embeddable": false,
                        "count": 0,
                        "link": "https://foo.bar/content/link",
                        "shared_with": "Just me",
                        "created_time": "timestamp",
                        "updated_time": "timestamp",
                        "clientupdatedtime": ""
                    }
                ]
            }
            

# GET /me/skydrive/{folder_id}/files{?access_token}
Enumerate the files within the specified folder.

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.


+ Response 200
    
    [Folder Contents][]

# GET /me/skydrive/{folder_id}/files{?filter,access_token}
Filter the returned types of files to specific values

+ Parameters

    + filter (required, string, `photos`) ... Type of filter to apply. Multiple filters can be combined by separating the value with a comma. For example: filters=videos,audio
        
        + Values
        
            + `albums`
            + `audio`
            + `folders`
            + `photos`
            + `videos`
            
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [Folder Contents][]

# GET /me/skydrive/{folder_id}/files{?limit,offset,access_token}
The limit and offset query parameters can be used to page the results of a larger folder.

+ Parameters

    + limit (optional, number, `50`) ... Limit the number of items returned from the query
    
    + offset (optional, number, `4`) ... Specify the first entry to return from the collection.

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [Folder Contents][]

# PUT /me/skydrive/{folder_id}/files/{file_name}{?access_token}{&overwrite}
Upload the contents of a file, or optionally replace the contents of an existing file.

+ Parameters

    + folder_id (required, string, `folder.0000000000000000`) ... Identifer for the folder to access

    + file_name (required, string, `newFile1.txt`) ... Name of the file being uploaded

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + overwrite (optional, string, `true`) ... Choose how to handle the upload if a file already exists with the same name
    
        + Values
            + `false`
            + `true`
            + `ChooseNewName`
        

+ Request (application/binary)

+ Response 200

# PUT /me/skydrive/{file_id}{?access_token}
Change the data stored about a file, photo, video, or audio.

+ Parameters

    + file_id (required, string, `file.0000000000000000.000000000000!000`) ... Identifer for the file to update

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Request File, Video, or Photo (application/json)

            {
                "name": "NewFilename.doc",
                "description": "new description"
            }
    
+ Response 200

+ Request Audio File (application/json)

            // Additional properties can be written for audio files
            {
                "name": "NewFilename.doc",
                "description": "new description",
                
                "title": "new audio title",
                "artist": "new artist",
                "album": "new album",
                "album_artist": "new album artist",
                "genre": "new genre"
            }
            
+ Response 200

# POST /me/skydrive/files{?access_token,state,redirect_uri}
Upload a file to a folder, for clients that cannot support the PUT operation. This method should be 
avoided if possible. When using **POST** method the contents of the request must be formatted as
multipart/form-data. You provide the file to upload in a multipart section, while providing the 
file name in the `Content-Disposition` header's *filename* parameter. For more information see
[RFC 2388](http://go.microsoft.com/fwlink/p/?linkid=233309). **Note** that only one multipart section
is supported in the body of the request.

**Important** On platforms that support the **PUT** request, **PUT** should be used to upload files to OneDrive
when possible to avoid errors that can occur when **POST** is used.

If you use the optional `redirect_uri` parameter, OneDrive returns an HTML result similar to the following
when the upload has completed:

        <html><head>
            <script type="text/javascript">
                window.location = "http://contoso.com/uploadcb.htm#state=myNewFileState&result={encoded json}"
            </script>
        </head></html>
        
The encoded JSON in the `result` query-string parameter will have two properties, `id` and `soruce` refering 
to the uploaded file.

+ Parameters

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + redirect_uri (optional, string `http://contoso.com/uploadcb.htm`)
        Optionally you can instruct OneDrive to notify the web browser when the upload finishes. You can also
        attach a unique identifier to each upload request so that you can identify a particular file if you 
        are uploading multiple files in quick succession. Specify the path to your callback page in this
        parameter.
        
        **Note** the domain portion of the path must match the redirect domain that you specified 
        in the Live SDK app management site for the corresponding client ID.
    
    + state (optional, string, `myNewFileState`) ... Unique identifer for callback to indicate the file being uploaded.
    
+ Request (multipart/form-data; boundary=A300x)

        --A300x
        Content-Disposition: form-data; name="file"; filename="HelloWorld.txt"
        Content-Type: application/octet-stream
        
        Hello, World!
        --A300x--

+ Response 200

# GET /me/skydrive/{file_id}/content{?access_token,download}
Download the contents of a file, photo, video, or audio. The **wl.skydrive** scope is required.

**Tip** You can instruct the user's web browser to prompt the user to save the file that's downloading 
instead of having the browser try to download and display the file directly in its own window. To do 
this, set the optional download parameter to true. This will add the `Content-Disposition: attachment` 
header to the response.

+ Parameters

    + file_id (required, string, `file.abcd1234.abcd1234!567`) ... ID for the file to download
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.
    
    + download = `false` (optional, boolean) ... Use the download parameter to set the Content-Disposition header on the response.
    
        + Values
        
            + `false`
            + `true`

+ Response 200

## Search [/me/skydrive/search{?q,access_token}]

+ Parameters

    + q (required, string, `family`) ... Query text used to find files and folders that match the text provided.
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

### Find Matching Filenames [GET]
    
+ Response 200

    [Folder Contents][]
    
# Group Account Information
To access a user's data, the **wl.basic** scope must be requested during authorization.

## User Information [/me]

+ Model (application/json)

            {
                "id": "contact.120312301230123010230123",
                "first_name": "Roberto",
                "last_name": "Tamburello",
                "name": "Roberto Tamburello",
                "gender": "male",
                "locale": "en_US"
            }

# GET /{user_id}{?access_token}
Retrieve user information for a contact specified by `user_id`. You can use the shortcut `me` to reference
the signed in user.

+ Parameters

    + user_id (required, string, `me`) ... ID value for the user who's information should be retrieved.
    
        + Values
            + `me`
            + `contact.c13123123010230123`
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

    [User Information][]

# GET /{user_id}/friends{?access_token}
Retrieve the friends of the contact specified by `user_id`. You can use the shortcut `me` to reference
the signed in user.

+ Parameters

    + user_id (required, string, `me`) ... ID value for the user who's information should be retrieved.
    
        + Values
            + `me`
            + `contact.c13123123010230123`
    
    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200 (application/json)

            { 
                "data": [
                { 
                    "id": "00000000000000",
                    "name": "Robert Tamburello"
                },
                {
                    "id": "000000000000001",
                    "name": "Ryan Gregg"
                }
                ]
            }

# Group Links to Files and Folders
Your app can get the following types of links to OneDrive folders and files.

+ An *embedded link*, which is an HTML code snippet that you can insert into a webpage to provide
an interactive view of the corresponding file. **Note** Currently, embedded links are supported only
for files owned by the user. To determine whether a given file can be embedded, check to see if the 
corresponding object's `is_embeddable` property is set to `true`.

+ A *read-only* link, which is a link to a read-only version of the folder or file.

+ A *read-write* link, which is a link to a read-write version of the folder or file.

**Important** When your app requests a read-only or read-write link to a file, the URL to that file is the
same for either request. When your app requests a read-only link for a file and then later requests a 
read-write link for the same file, read-only permission for that link is revoked. Similarly, when your app 
requests a read-write link for a file and then later requests a read-only link for that same file, read-write
permission for that link is revoked.

# GET /{file_or_folder_id}/shared_read_link{?access_token}

+ Parameters

    + file_or_folder_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file or folder to get a link for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "link": "https://onedrive.live.com/redir.aspx?cid=..." }

# GET /{file_or_folder_id}/shared_edit_link{?access_token}

+ Parameters

    + file_or_folder_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file or folder to get a link for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "link": "https://onedrive.live.com/redir.aspx?cid=..." }


# GET /{file_id}/embed{?access_token}

+ Parameters

    + file_id (required, string, `file.000000000.00000000!000`) ... Identifer for the file to get embed HTML for

    + access_token (optional, string, `abcd123456`) ... Access token from authentication, if not using Authentication header.

+ Response 200

            { "embed_html": "<iframe src=\"https://onedrive.live.com/....\"></iframe>" }




